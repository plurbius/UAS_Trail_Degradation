# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-04-19 13:56:15
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from sys import argv

def NAGrade(Trail_Tread_Centerline="ModelBuilder\\Width\\NA_TreadCenterline1:NA_TreadCenterline1", Trail_DSM="Admin\\NA_Elevation_P_M"):  # NAGrade

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Data Management Tools.tbx")

    # Process: Generate Points Along Lines (Generate Points Along Lines) (management)
    Trail_Centerline_1m_Points = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlinePoints_1m"
    arcpy.management.GeneratePointsAlongLines(Input_Features=Trail_Tread_Centerline.__str__().format(**locals(),**globals()), Output_Feature_Class=Trail_Centerline_1m_Points, Point_Placement="DISTANCE", Distance="1 Meters", Include_End_Points="END_POINTS")

    # Process: Split Line at Point (Split Line at Point) (management)
    Centerline_1m_Segments = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m"
    arcpy.management.SplitLineAtPoint(in_features=Trail_Tread_Centerline.__str__().format(**locals(),**globals()), point_features=Trail_Centerline_1m_Points, out_feature_class=Centerline_1m_Segments, search_radius="0.1 Meters")

    # Process: Export Features (Export Features) (conversion)
    Centerline_Segmented = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Grade"
    arcpy.conversion.ExportFeatures(in_features=Centerline_1m_Segments, out_features=Centerline_Segmented, field_mapping="FID \"FID\" true true false 4 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m,FID,-1,-1;FID_NA_TreadSmoothed \"FID_NA_TreadSmoothed\" true true false 4 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m,FID_NA_TreadSmoothed,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m,SHAPE_Length,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m,ORIG_FID,-1,-1;ORIG_SEQ \"ORIG_SEQ\" true true false 0 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_CenterlineSegs_1m,ORIG_SEQ,-1,-1")

    # Process: Add Surface Information (Add Surface Information) (sa)
    Graded_Centerline = arcpy.sa.AddSurfaceInformation(Centerline_Segmented, Trail_DSM.__str__().format(**locals(),**globals()), ["AVG_SLOPE"], "BILINEAR", None, 1, 0, "")
    .save(Add_Surface_Information)


    # Process: Buffer (Buffer) (analysis)
    Grade_Buffer = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Grade_Buffer"
    arcpy.analysis.Buffer(in_features=Graded_Centerline, out_feature_class=Grade_Buffer, buffer_distance_or_field="1 Meters", line_side="FULL", line_end_type="FLAT", dissolve_option="NONE", method="PLANAR")

    # Process: Polygon to Raster (Polygon to Raster) (conversion)
    Grade_Buffer_Raster = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Grade_Raster"
    with arcpy.EnvManager(snapRaster="Admin\\NA_Elevation_P_M"):
        arcpy.conversion.PolygonToRaster(in_features=Grade_Buffer, value_field="Avg_Slope", out_rasterdataset=Grade_Buffer_Raster, cell_assignment="MAXIMUM_AREA", priority_field="NONE", cellsize="CIMPATH=north_abreu/na_elevation_p_m.json", build_rat="BUILD")

    # Process: Raster to Point (Raster to Point) (conversion)
    Grade_Points = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_GradePoints1"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled", snapRaster="Admin\\NA_Elevation_P_M"):
        arcpy.conversion.RasterToPoint(in_raster=Grade_Buffer_Raster, out_point_features=Grade_Points, raster_field="VALUE")

    # Process: Kriging (Kriging) (sa)
    Trail_Grade = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Kriging_Grade"
    Kriging = Trail_Grade
    NA_Grade_Variance = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Grade_Variance"
    with arcpy.EnvManager(cellSize="MAXOF", mask="NA_TreadSmoothed:NA_TreadSmoothed"):
        Trail_Grade = arcpy.sa.Kriging(Grade_Points, "GRID_CODE", "Spherical 0.413865 # # #", "CIMPATH=north_abreu/na_elevation_p_m.json", "VARIABLE 12", NA_Grade_Variance)
        Trail_Grade.save(Kriging)

        NA_Grade_Variance = arcpy.Raster(NA_Grade_Variance)

    # Process: Reclassify (Reclassify) (sa)
    Grade_Reclass = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\NA_Grade_Reclass"
    Reclassify = Grade_Reclass
    with arcpy.EnvManager(cellSize="North Abreu Width", snapRaster="North Abreu Width"):
        Grade_Reclass = arcpy.sa.Reclassify(Trail_Grade, "VALUE", "0.490362 8 1;8 10 2;10 12 3;12 15 4;15 27 5", "DATA")
        Grade_Reclass.save(Reclassify)


if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb", workspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb"):
        NAGrade(*argv[1:])
