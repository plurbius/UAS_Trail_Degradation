# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-04-19 13:56:34
"""
import arcpy
from arcpy.sa import *

def TRWidth():  # TRWidth

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("Foundation")
    arcpy.CheckOutExtension("Defense")
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Data Management Tools.tbx")
    TR_TrailTread_P_M1_2_ = "TR_TrailTread_P_M1"
    TR_TrailTread_P_M1 = "TR_TrailTread_P_M1"
    TR_StudyArea_Buf_P_M = "TR_StudyArea_Buf_P_M"

    # Process: Smooth Polygon (Smooth Polygon) (cartography)
    TR_TreadSmoothed = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_TreadSmoothed"
    with arcpy.EnvManager(transferGDBAttributeProperties=False):
        arcpy.cartography.SmoothPolygon(in_features=TR_TrailTread_P_M1_2_, out_feature_class=TR_TreadSmoothed, algorithm="PAEK", tolerance="0.5 Meters")

    # Process: Polygon To Centerline (Polygon To Centerline) (topographic)
    TR_TreadCenterline = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_TreadCenterline"
    arcpy.topographic.PolygonToCenterline(in_features=TR_TreadSmoothed, out_feature_class=TR_TreadCenterline)

    # Process: Generate Transects Along Lines (Generate Transects Along Lines) (management)
    TR_TreadTransects = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_TreadTransects"
    arcpy.management.GenerateTransectsAlongLines(in_features=TR_TreadCenterline, out_feature_class=TR_TreadTransects, interval="0.5 Meters", transect_length="4 Meters", include_ends="END_POINTS")

    # Process: Clip (Clip) (analysis)
    TR_TransectsClip = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_TransectsClip"
    arcpy.analysis.Clip(in_features=TR_TreadTransects, clip_features=TR_TreadSmoothed, out_feature_class=TR_TransectsClip)

    # Process: Add Field (2) (Add Field) (management)
    TR_TransectsClip_2_ = arcpy.management.AddField(in_table=TR_TransectsClip, field_name="Trail_Width", field_type="FLOAT")[0]

    # Process: Calculate Field (Calculate Field) (management)
    TR_TransectsClip_3_ = arcpy.management.CalculateField(in_table=TR_TransectsClip_2_, field="Trail_Width", expression="!Shape_Length!")[0]

    # Process: Buffer (Buffer) (analysis)
    TR_TransectBuffer = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_TransectBuffer"
    arcpy.analysis.Buffer(in_features=TR_TransectsClip_3_, out_feature_class=TR_TransectBuffer, buffer_distance_or_field="0.5 Meters", line_side="FULL", line_end_type="ROUND", dissolve_option="NONE", method="PLANAR")

    # Process: Polygon to Raster (Polygon to Raster) (conversion)
    TR_TransectRaster = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_TransectRaster"
    with arcpy.EnvManager(snapRaster="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Elevation_P_M"):
        arcpy.conversion.PolygonToRaster(in_features=TR_TransectBuffer, value_field="Trail_Width", out_rasterdataset=TR_TransectRaster, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="CIMPATH=tooth_ridge/tr_elevation_p_m.json", build_rat="BUILD")

    # Process: Raster to Point (Raster to Point) (conversion)
    TR_Width_Points = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_Width_Points"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPoint(in_raster=TR_TransectRaster, out_point_features=TR_Width_Points, raster_field="VALUE")

    # Process: Kriging (Kriging) (3d)
    TR_Width = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Width"
    Output_variance_of_prediction_raster_2_ = ""
    with arcpy.EnvManager(mask="ModelBuilder\\Width\\TR_TreadSmoothed:TR_TreadSmoothed", snapRaster="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Elevation_P_M"):
        arcpy.ddd.Kriging(in_point_features=TR_Width_Points, z_field="grid_code", out_surface_raster=TR_Width, semiVariogram_props="Spherical 0.037400 # # #", cell_size="CIMPATH=tooth_ridge/tr_elevation_p_m.json", out_variance_prediction_raster=Output_variance_of_prediction_raster_2_)
        TR_Width = arcpy.Raster(TR_Width)

    # Process: Reclassify (2) (Reclassify) (sa)
    TR_Width_Reclass = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Width_Reclass"
    Reclassify_2_ = TR_Width_Reclass
    TR_Width_Reclass = arcpy.sa.Reclassify(TR_Width, "VALUE", "0.408000 0.500000 1;0.500000 1 2;1 1.500000 3;1.500000 1.750000 4;1.750000 2.406536 5", "DATA")
    TR_Width_Reclass.save(Reclassify_2_)


if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb", workspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb"):
        TRWidth()
