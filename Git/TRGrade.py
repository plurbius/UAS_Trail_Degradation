# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-04-19 13:56:53
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from sys import argv

def TRGrade(ToothRidgeTrail_ElevationToolbox_export_SatAug10153610933470_tif_3_="Admin\\TR_Elevation_P_M1"):  # TRGrade

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Data Management Tools.tbx")
    TR_TreadCenterline_3_ = "TR_TreadCenterline"

    # Process: Generate Points Along Lines (2) (Generate Points Along Lines) (management)
    TR_TreadCenterline_Points_1M = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_TreadCenterline_Points_1M"
    arcpy.management.GeneratePointsAlongLines(Input_Features=TR_TreadCenterline_3_, Output_Feature_Class=TR_TreadCenterline_Points_1M, Point_Placement="DISTANCE", Distance="1 Meters")

    # Process: Split Line at Point (Split Line at Point) (management)
    TR_CenterlineSegs_1m = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m"
    arcpy.management.SplitLineAtPoint(in_features=TR_TreadCenterline_3_, point_features=TR_TreadCenterline_Points_1M, out_feature_class=TR_CenterlineSegs_1m, search_radius="0.1 Meters")

    # Process: Export Features (Export Features) (conversion)
    TR_Grade = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_Grade"
    arcpy.conversion.ExportFeatures(in_features=TR_CenterlineSegs_1m, out_features=TR_Grade, field_mapping="FID \"FID\" true true false 4 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m,FID,-1,-1;FID_TR_TreadSmoothed \"FID_TR_TreadSmoothed\" true true false 4 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m,FID_TR_TreadSmoothed,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m,SHAPE_Length,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m,ORIG_FID,-1,-1;ORIG_SEQ \"ORIG_SEQ\" true true false 0 Long 0 0,First,#,F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_CenterlineSegs_1m,ORIG_SEQ,-1,-1")

    # Process: Add Surface Information (Add Surface Information) (sa)
    TR_Grade_2_ = arcpy.sa.AddSurfaceInformation(TR_Grade, ToothRidgeTrail_ElevationToolbox_export_SatAug10153610933470_tif_3_.__str__().format(**locals(),**globals()), ["AVG_SLOPE"], "BILINEAR", None, 1, 0, "")
    .save(Add_Surface_Information)


    # Process: Buffer (Buffer) (analysis)
    TR_Grade_Buffer = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_Grade_Buffer"
    arcpy.analysis.Buffer(in_features=TR_Grade_2_, out_feature_class=TR_Grade_Buffer, buffer_distance_or_field="2 Meters", line_side="FULL", line_end_type="FLAT", dissolve_option="NONE", method="PLANAR")

    # Process: Polygon to Raster (Polygon to Raster) (conversion)
    TR_Grade_Raster = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Grade_Raster"
    with arcpy.EnvManager(cellSize=ToothRidgeTrail_ElevationToolbox_export_SatAug10153610933470_tif_3_):
        arcpy.conversion.PolygonToRaster(in_features=TR_Grade_Buffer, value_field="Avg_Slope", out_rasterdataset=TR_Grade_Raster, cell_assignment="MAXIMUM_AREA", priority_field="NONE", cellsize="CIMPATH=tooth_ridge/tr_elevation_p_m1.json", build_rat="BUILD")

    # Process: Raster to Point (Raster to Point) (conversion)
    TR_GradePoints = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\Tooth_Ridge\\TR_GradePoints"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPoint(in_raster=TR_Grade_Raster, out_point_features=TR_GradePoints, raster_field="VALUE")

    # Process: Kriging (2) (Kriging) (sa)
    TR_Kriging_Grade = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Kriging_Grade"
    Kriging_2_ = TR_Kriging_Grade
    TR_Grade_Variance = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Grade_Variance"
    with arcpy.EnvManager(cellSize="MAXOF", mask="ModelBuilder\\Width\\TR_TreadSmoothed:TR_TreadSmoothed", snapRaster="Admin\\TR_Elevation_P_M1"):
        TR_Kriging_Grade = arcpy.sa.Kriging(TR_GradePoints, "grid_code", "Spherical 0.092453 # # #", "CIMPATH=tooth_ridge/tr_elevation_p_m1.json", "VARIABLE 12", TR_Grade_Variance)
        TR_Kriging_Grade.save(Kriging_2_)

        TR_Grade_Variance = arcpy.Raster(TR_Grade_Variance)

    # Process: Reclassify (Reclassify) (sa)
    TR_Grade_John_Reclass = "F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb\\TR_Grade_John_Reclass"
    Reclassify = TR_Grade_John_Reclass
    with arcpy.EnvManager(cellSize="ModelBuilder\\TR_Width:TR_Width", snapRaster="ModelBuilder\\TR_Width:TR_Width"):
        TR_Grade_John_Reclass = arcpy.sa.Reclassify(TR_Kriging_Grade, "VALUE", "1.312424 8 1;8 10 2;10 12 3;12 15 4;15 24.757591 5", "DATA")
        TR_Grade_John_Reclass.save(Reclassify)


if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb", workspace="F:\\Grad\\Thesis\\Thesis_Working\\Thesis_Working.gdb"):
        TRGrade(*argv[1:])
